---
title: "Basic usage of mspacman"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{basic-usage}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

`mspacman` supports the calculation of "leveled-up" multimodal systems productivity (MSP) metrics by reflecting observed [or simulated] trip record travel time data. The basic building block of these metrics is a *complete trips curve*, which defines how many trips have been completed by a given point in a day. As we'll see later, observing statistics along this curve allows us to draw inference about system productivity.

### The complete trips curve

The complete trips curve is the basis for our MSP metrics, but how do we build it? First, consider assessing the completeness of just a single trip. Imagine this trip begins at 9:00am and ends at 9:10am. The calculations in this model define completeness as the share of total travel time completed. Of course, this is not a perfect assumption -- especially for motorized travel, some stretches may be quicker than others -- but it is a reasonable one to make given usual data constraints (a more detailed calculation would require trip path and speed information, which is very rare to find). So, how do we assess define completeness of our imagined trip?

- Before and exactly at 9am, this trip is totally incomplete, because it hasn't started yet! Its "completeness" is thus 0. 

- At 9:01am, this trip is partially complete; in particular, 1 of the 10 trips minutes has been completed. Completeness is thus 1/10, or 0.1. 

- At 9:02am, completeness is 0.2, using the same logic described above. This logic will also apply at 9:03am, 9:04am, and all the way up to 9:09am.

- At 9:10am, this trip has finished. Its completeness is now 1.

- At 9:11am, and for the rest of the day, the trip remains fully complete. The completeness of 1 persists for the remainder of the day.

This logic can be applied to each individual trip in a collection to understand how much of each trip has been completed at any given minute. Getting a complete trips curve is then as simple as (1) summing trip completeness across each minute of the day, and (2) applying a function constructor.

Building the complete trips curve in `mspacman` is split into two functions, covering the two components defined above. The function `completed_trips_by_minute` calculates completed trips by minute for a collection of 1 or more trips. `complete_trips_curve` applies the function constructor: a monotone Hermite spline according to the method of Fritsch and Carlson (Mono-H-FC).

How about we see this in action? We'll use our sample data from Benton County, OR, and look at the place I used to live: Chintimini Park. Note that `completed_trips_by_minute` expects start and end times in integer seconds ($0 < t < 86400$); the sample data in this package is already in seconds, but you may need to convert your own data to this format.

```{r Building the complete trips curve}
# Load mspacman
library(mspacman)

# Subset to one block group, for now
chintimini_park = benton[benton$GEOID == "410030011011",]

# Calculate completed trips by minute
ctbm = completed_trips_by_minute(
  start_times = chintimini_park$start_time,
  end_times = chintimini_park$end_time
)

# Build the completed trips curve
ctc = complete_trips_curve(
  x = ctbm,
  percent = FALSE
)
```

A few notes about the completed trips curve are worth mentioning:

- The spline is necessary to make the complete trip curve differentiable. Technically, the observed completed trips by minute is sufficient to define a complete trips curve, but corners will exist at every whole minute unless some sort of smoothing is applied. However, because the spline is an interpolator, we are guaranteed to pass exactly through all observed points (the completed trips by minute). In addition, any induced error is likely trivial, since we already have observed data at every minute; in other words, we're only interpolating at the level of seconds. 

- The use of the Mono-H-FC spline guarantees that the complete trips curve is non-decreasing. This ensures we're never losing completed trips.

- The `percent` option in the complete trips curve allows for a re-expression of complete trips as a "share of daily trips completed" (as opposed to absolute magnitude of completed trips). This option allows for the production of imminently comparable curves between areas with different magnitudes. We choose not to use it here since we're not looking at comparisons in this vignette.

### Plotting the complete trips curve

The complete trips curve, as output by `complete_trips_curve`, is just a function. To observe it, use `plot_complete_trips_curve`:

```{r Plot complete trips curve, fig.width=7}
plot_complete_trips_curve(
  complete_trips_curve = ctc
)
```

### Productivity and efficiency

FHWA defines MSP in the following way (for more information see [their innovation and reseach plan](https://ops.fhwa.dot.gov/publications/fhwahop18085/index.htm)):

> MSP is based on the classic definition of productivity: the ratio of inputs to outputs in the production process. For the multimodal transportation system completed person trips are production outputs and network travel times, or network minutes, are production inputs. The MSP score is the number of completed person trips per network minute. The higher the score, the higher the productivity of the system.

Though sensible, the "completed trips per network minute" approach has a few key drawbacks:

1. It requires the specification of a *range of time* over which to calculate MSP. That is to say, it does not support the measurement of productivity at a *single point in time*. While assessing productivity over a longer time period is sometimes useful -- for example, an AM or PM peak period -- it can result in over-generalization of travel patterns within that range.

2. It does not take into account *how efficiently trips are completed*. It helps to illustrate this point with an example: consider a case A where 10 trips are completed between 9:00am and 9:10am, and a case B where 10 trips are completed between 9:00am and 9:05am, and 0 trips are completed between 9:05am and 9:10am. If MSP is to be measured over the time range 9:00am-9:10am, productivity is equal in cases A and B under the FHWA definition. However, it is clear that trips are being completed quicker, or *more efficiently* over this time range in case B. Of course, you could come to this conclusion by taking an additional measurement of MSP over the range 9:00am-9:05am, but you may not be aware of this difference a priori.

The metrics in `mspacman` attempt to address these concerns. The first metric, termed **productivity** addresses point 1 by measuring the instantaneous increase in completed trips. This is accomplished by taking the first derivative of the complete trips curve. Its interpretation is "the rate of increase in complete trips at time $t$".

We'll continue our Chintimini Park example to show this in action.

```{r Productivity, fig.width=7}
# What is the productivity at every hour during the working day?
example_times = (9:17) * 60 #functions require time inputs in minutes
prod = data.frame(
  time = c("9am","10am","11am","12pm","1pm","2pm","3pm","4pm","5pm"),
  prod = productivity(
    times = example_times,
    complete_trips_curve = ctc
  )
)
prod

# How does productivity change over the course of the day?
plot_productivity(
  complete_trips_curve = ctc,
  smooth = TRUE
)
```

As you can see, productivity for trips originating in the Chinitimini Park area hits its peaks around 7:30am, 1:30pm, and 3:30pm, but remains relatively high throughout the course of the day. This is consistent with the fact that this neighborhood is primarily college students; students are more likely to take mid-day trips to class, and varying class schedules means that trips are occurring consistently throughout the day. Note that the use of `smooth=TRUE` in the call to `plot_productivity` allows us to observe a general trend amidst the noisines of the observed data. 

Point 2 above is addressed by explicitly accounting for the rate at which trips are completed in a time range. We refer to this as *efficiency*, which is calculated by taking the complete trips function average across a time range (the function integral divided by the width of the range). This is similar in spirit to FHWA's measure of MSP, but accounts for *all completed trip values in a time range, not just the first and last*. It's interpretation is "the number of newly completed trips would we expect to observe at a random time between $t1$ and $t2$."

Again, we'll use Chintimini Park to explore efficiency.

```{r Efficiency, fig.width=7}
# What is the efficiency in 30 minute intervals around every hour during the
# working day?
interval_lbs = (9:17) * 60 - 1 #functions require time inputs in minutes
interval_ubs = interval_lbs + 2
eff = data.frame(
  time_lb = c("8:45am","9:45am","10:45am","11:45am",
              "12:45pm","1:45pm","2:45pm","3:45pm","4:45pm"),
  time_ub = c("9:15am","10:15am","11:15am","12:15pm",
              "1:15pm","2:15pm","3:15pm","4:15pm","5:15pm"),
  eff = efficiency(
    time_lowers = interval_lbs,
    time_uppers = interval_ubs,
    complete_trips_curve = ctc
  )
)
eff

# How does 30-minute efficiency change over the course of the day?
plot_efficiency(
  complete_trips_curve = ctc,
  window = 30, #half of our desired 30minute window
  smooth = TRUE
)
```

As with productivity, efficiency is at it's highest during the "school day" -- roughly 7:30am-4pm. While productivity peaks around 3:30pm -- with an instantaneous rate of increase of 7 completed trips  -- efficiency peaks around 7:30am -- with the expectation of having observed nearly 80 completed trips at any time between 7:15am and 7:45am. This suggests that there may be more trips in the late afternoon than the morning, but that the morning trips are shorter.

You'll notice that the patterns between productivity and efficiency are similar, which is a sensible result: efficiency will actually approach productivity in limit (as the window over which efficiency is calculated approaches 0). However, given the constraints of these functions -- the smallest supported efficiency window is 1 minute -- we'll never observe perfect correlation. 



