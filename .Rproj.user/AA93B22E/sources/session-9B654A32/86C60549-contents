
# Building vectors of completed trips by minute ================================

#' Calculate completed trips by minute from a set of trip start and end times
#'
#' @param start_times Vector of trip start times, in integer seconds; should
#' align with indices of `end_times`
#' @param end_times Vector of trip end times, in integer seconds; should align
#' with indices of `start_times`
#'
#' @return A vector of completed trips for each minute in a 24 hour day,
#' beginning and ending at 12:00am (for a total of 1441 entries)
#'
#' @export
completed_trips_by_minute = function(start_times, end_times){
  # Check to ensure start and end times are the same length, and constitute
  # valid trip definitions
  if(any(start_times < 0 | start_times > 86400)){
    stop("all `start_times` must be between 0 and 86400 (inclusive)")
  }
  if(any(end_times < 0 | end_times > 86400)){
    stop("all `end_times` must be between 0 and 86400 (inclusive)")
  }
  if(length(start_times) != length(end_times)){
    stop("`start_times` and `end_times` must be the same length")
  }
  # Count number of trips
  ntrips = length(start_times)
  # Iterate over trips to create trip completion paths
  ijx = purrr::pmap(list(start_times, end_times, 1:ntrips), function(s,e,n){
    #print(n)
    # If the trip ends after the day, extend it to the next day
    if(e < s){
      e = 86400 + e
    }
    # Identify the first minute in which trip completion is non-zero, and the
    # last minute in which trip completion is non-1
    smin = ceiling(s/60)
    emin = floor(e/60)
    # Create the trip completion paths
    if(emin > 1440){
      # Trip ends after the first minute of the next day: trip is <1 completed
      # in morning, 1 completed after, then 1+fractional completed in the
      # evening when it starts
      x_add_evening = ((smin:1440)*60-s)/(e - s) + 1
      x_add_morning = ((1441:emin)*60-s)/(e - s)
      i_add = 1:1440
      x_add = c(x_add_morning,
                rep(1,1440-length(x_add_evening)-length(x_add_morning)),
                x_add_evening)
    } else if(emin == 1440){
      # Trip ends during the first minute of the next day: trip is 1 completed
      # all day, then 1+fractional completed in the evening when it starts
      x_add_evening = ((smin:1440)*60-s)/(e - s) + 1
      i_add = 1:1440
      x_add = c(rep(1,1440-length(x_add_evening)),
                x_add_evening)
    } else{
      # Trip is completed during the day
      i_add = smin:1440
      if(emin > smin){
        # Trip begins and ends in non-consecutive minutes: trip is 0 completed
        # before it starts, fractional completed while it is going, then 1
        # completed once it is over
        x_add = c(c((smin:emin*60-s)/(e - s)), rep(1, length((emin+1):1440)))
      } else if(emin == smin){
        # Trip begins in one minute and ends in the next: trip is 0 completed
        # before the end, 1 completed after
        x_add = rep(1, length(emin:1440))
      } else{
        # Trip begins and ends in same minute: trip is 0 completed before
        # starting, 1 complete upon starting
        x_add = rep(1, length(smin:1440))
      }
      if(smin == 0){
        i_add = i_add[2:length(i_add)]
        x_add = x_add[2:length(x_add)]
      }
    }
    # if(length(i_add) != length(x_add)){
    #   break
    # }
    # Adjust for time=0 -- that's whatever you've got at 1440 - 1
    w = which(i_add == 1440)
    if(x_add[w] > 1){
      x_add = c(x_add[w] - 1, x_add)
      i_add = c(1, i_add+1)
    } else{
      i_add = i_add+1
    }
    j_add = rep(n, length(i_add))
    return(list(i=i_add, j=j_add, x=x_add))
  })
  # Create a sparse matrix defining the trip completion paths and take rowSums
  # as the complete trips
  complete_trips = Matrix::sparseMatrix(
    i=lapply(ijx, function(l){l$i}) %>% unlist(),
    j=lapply(ijx, function(l){l$j}) %>% unlist(),
    x=lapply(ijx, function(l){l$x}) %>% unlist(),
    dims=c(1441,ntrips)
  ) %>%
    Matrix::rowSums()
  return(complete_trips)
}

# Combine completed trips by minute counts =====================================

#' Combine multiple completed trips by minute vectors into a single vector
#'
#' This function combines any number of complete trip by minute vectors into a
#' single completed trips by minute vector by adding completed trips at each
#' minute
#'
#' @param ... Any number of completed trips by minute vectors
#'
#' @return A vector of completed trips by minute, as totaled from the input
#' vectors
#'
#' @export
combine_completed_trips_by_minute = function(...){
  lens = lapply(..., length) %>% unlist()
  dtypes = lapply(..., is.numeric) %>% unlist()
  if(!all(lens == 1441) | any(!dtypes)){
    stop("at least 1 input is not a valid complete trips by minute vector")
  }
  ctc = Reduce(cbind, ...) %>%
    rowSums()
  return(ctc)
}

# Build a complete trips curve =================================================

#' Convert a completed trips by minute vector into a completed trips curve
#'
#' @param x A completed trips by minute vector
#' @param percent A boolean indicating whether the curve should be constructed
#' as total trips completed (`FALSE`) or share of trips completed (`TRUE`).
#' Setting `percent=TRUE` allows direct comparisons to be made across groupings
#' that have different magnitudes of completed trips
#'
#' @return A function defining the completed trips curve for the input completed
#' trips by minute. It will span a 2-day period to guarantee continuity at
#' 12:00am
#'
#' @export
complete_trips_curve = function(x, percent=FALSE){
  # Stretch the curve over 2 days for continuity at midnight
  if(length(x) != 1441 | !is.numeric(x)){
    stop("`x` is not a valid complete trips curve")
  }
  day1 = data.table(x=0:1440,
                    y=x)
  if(percent==TRUE){
    day1$y = (day1$y - min(day1$y)) / (max(day1$y) - min(day1$y))
  }
  day2 = data.table(x=1441:2880,
                    y=(day1$y[nrow(day1)]-day1$y[1])+day1$y[2:nrow(day1)])
  curve = rbind(day1, day2)
  # Fit and return the smooth function
  s = splinefun(x=curve$x, y=curve$y, method="monoH.FC") #hyman?? either will guarantee derivatives >= 0
  return(s)
}
