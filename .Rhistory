usethis::create_package()
usethis::use_mit_license()
library(devtools)
document()
document()
?completed_trips_by_minute
?combine_completed_trips_by_minute
?complete_trips_curve
?productivity
?efficiency
document()
usethis::use_namespace()
document()
document()
usethis::use_readme_rmd()
build_readme()
build_readme()
build_readme()
build_readme()
check()
check()
check()
check()
usethis::use_import_from("data.table")
check()
check()
check()
usethis::use_import_from("stats", "splinefun")
usethis::use_import_from("stats", "splinefun")
usethis::use_import_from("stats", "integrate")
usethis::use_import_from("magrittr", "%>%")
check()
check()
check()
check()
document()
check()
library(devtools)
load_all()
df = readRDS(r"(C:\Users\w_rpg\Downloads\continuous_productivity\continuous_productivity_data_benton.rds)")
df
g = df[origin_bgrp == "410030001001"]
ctbm = completed_trips_by_minute(g$start_time, g$end_time)
#'
#' @param start_times Vector of trip start times, in integer seconds; should
#' align with indices of `end_times`
#' @param end_times Vector of trip end times, in integer seconds; should align
#' with indices of `start_times`
#'
#' @return A vector of completed trips for each minute in a 24 hour day,
#' beginning and ending at 12:00am (for a total of 1441 entries)
#'
#' @export
completed_trips_by_minute = function(start_times, end_times){
# Check to ensure start and end times are the same length, and constitute
# valid trip definitions
if(any(start_times < 0 | start_times > 86400)){
stop("all `start_times` must be between 0 and 86400 (inclusive)")
}
if(any(end_times < 0 | end_times > 86400)){
stop("all `end_times` must be between 0 and 86400 (inclusive)")
}
if(length(start_times) != length(end_times)){
stop("`start_times` and `end_times` must be the same length")
}
# Count number of trips
ntrips = length(start_times)
# Iterate over trips to create trip completion paths
ijx = purrr::pmap(list(start_times, end_times, 1:ntrips), function(s,e,n){
#print(n)
# If the trip ends after the day, extend it to the next day
if(e < s){
e = 86400 + e
}
# Identify the first minute in which trip completion is non-zero, and the
# last minute in which trip completion is non-1
smin = ceiling(s/60)
emin = floor(e/60)
# Create the trip completion paths
if(emin > 1440){
# Trip ends after the first minute of the next day: trip is <1 completed
# in morning, 1 completed after, then 1+fractional completed in the
# evening when it starts
x_add_evening = ((smin:1440)*60-s)/(e - s) + 1
x_add_morning = ((1441:emin)*60-s)/(e - s)
i_add = 1:1440
x_add = c(x_add_morning,
rep(1,1440-length(x_add_evening)-length(x_add_morning)),
x_add_evening)
} else if(emin == 1440){
# Trip ends during the first minute of the next day: trip is 1 completed
# all day, then 1+fractional completed in the evening when it starts
x_add_evening = ((smin:1440)*60-s)/(e - s) + 1
i_add = 1:1440
x_add = c(rep(1,1440-length(x_add_evening)),
x_add_evening)
} else{
# Trip is completed during the day
i_add = smin:1440
if(emin > smin){
# Trip begins and ends in non-consecutive minutes: trip is 0 completed
# before it starts, fractional completed while it is going, then 1
# completed once it is over
x_add = c(c((smin:emin*60-s)/(e - s)), rep(1, length((emin+1):1440)))
} else if(emin == smin){
# Trip begins in one minute and ends in the next: trip is 0 completed
# before the end, 1 completed after
x_add = rep(1, length(emin:1440))
} else{
# Trip begins and ends in same minute: trip is 0 completed before
# starting, 1 complete upon starting
x_add = rep(1, length(smin:1440))
}
if(smin == 0){
i_add = i_add[2:length(i_add)]
x_add = x_add[2:length(x_add)]
}
}
# if(length(i_add) != length(x_add)){
#   break
# }
# Adjust for time=0 -- that's whatever you've got at 1440 - 1
w = which(i_add == 1440)
if(x_add[w] > 1){
x_add = c(x_add[w] - 1, x_add)
i_add = c(1, i_add+1)
} else{
i_add = i_add+1
}
j_add = rep(n, length(i_add))
return(list(i=i_add, j=j_add, x=x_add))
})
# Create a sparse matrix defining the trip completion paths and take rowSums
# as the complete trips
complete_trips = Matrix::sparseMatrix(
i=lapply(ijx, function(l){l$i}) %>% unlist(),
j=lapply(ijx, function(l){l$j}) %>% unlist(),
x=lapply(ijx, function(l){l$x}) %>% unlist(),
dims=c(1441,ntrips)
) %>%
rowSums()
return(complete_trips)
}
ctbm = completed_trips_by_minute(g$start_time, g$end_time)
start_times = g$start_time
end_times = g$end_time
# Check to ensure start and end times are the same length, and constitute
# valid trip definitions
if(any(start_times < 0 | start_times > 86400)){
stop("all `start_times` must be between 0 and 86400 (inclusive)")
}
if(any(end_times < 0 | end_times > 86400)){
stop("all `end_times` must be between 0 and 86400 (inclusive)")
}
if(length(start_times) != length(end_times)){
stop("`start_times` and `end_times` must be the same length")
}
# Count number of trips
ntrips = length(start_times)
# Iterate over trips to create trip completion paths
ijx = purrr::pmap(list(start_times, end_times, 1:ntrips), function(s,e,n){
#print(n)
# If the trip ends after the day, extend it to the next day
if(e < s){
e = 86400 + e
}
# Identify the first minute in which trip completion is non-zero, and the
# last minute in which trip completion is non-1
smin = ceiling(s/60)
emin = floor(e/60)
# Create the trip completion paths
if(emin > 1440){
# Trip ends after the first minute of the next day: trip is <1 completed
# in morning, 1 completed after, then 1+fractional completed in the
# evening when it starts
x_add_evening = ((smin:1440)*60-s)/(e - s) + 1
x_add_morning = ((1441:emin)*60-s)/(e - s)
i_add = 1:1440
x_add = c(x_add_morning,
rep(1,1440-length(x_add_evening)-length(x_add_morning)),
x_add_evening)
} else if(emin == 1440){
# Trip ends during the first minute of the next day: trip is 1 completed
# all day, then 1+fractional completed in the evening when it starts
x_add_evening = ((smin:1440)*60-s)/(e - s) + 1
i_add = 1:1440
x_add = c(rep(1,1440-length(x_add_evening)),
x_add_evening)
} else{
# Trip is completed during the day
i_add = smin:1440
if(emin > smin){
# Trip begins and ends in non-consecutive minutes: trip is 0 completed
# before it starts, fractional completed while it is going, then 1
# completed once it is over
x_add = c(c((smin:emin*60-s)/(e - s)), rep(1, length((emin+1):1440)))
} else if(emin == smin){
# Trip begins in one minute and ends in the next: trip is 0 completed
# before the end, 1 completed after
x_add = rep(1, length(emin:1440))
} else{
# Trip begins and ends in same minute: trip is 0 completed before
# starting, 1 complete upon starting
x_add = rep(1, length(smin:1440))
}
if(smin == 0){
i_add = i_add[2:length(i_add)]
x_add = x_add[2:length(x_add)]
}
}
# if(length(i_add) != length(x_add)){
#   break
# }
# Adjust for time=0 -- that's whatever you've got at 1440 - 1
w = which(i_add == 1440)
if(x_add[w] > 1){
x_add = c(x_add[w] - 1, x_add)
i_add = c(1, i_add+1)
} else{
i_add = i_add+1
}
j_add = rep(n, length(i_add))
return(list(i=i_add, j=j_add, x=x_add))
})
ijx[[1]]
M = Matrix::sparseMatrix(
i=lapply(ijx, function(l){l$i}) %>% unlist(),
j=lapply(ijx, function(l){l$j}) %>% unlist(),
x=lapply(ijx, function(l){l$x}) %>% unlist(),
dims=c(1441,ntrips)
)
M
rowSums(M)
ijx[[1]$i]
ijx[[1]]$i
ijx[[1]]$j
ijx[[1]]$x
M
m = as.matrix(M)
m
rowSums(m)
# Create a sparse matrix defining the trip completion paths and take rowSums
# as the complete trips
complete_trips = Matrix::sparseMatrix(
i=lapply(ijx, function(l){l$i}) %>% unlist(),
j=lapply(ijx, function(l){l$j}) %>% unlist(),
x=lapply(ijx, function(l){l$x}) %>% unlist(),
dims=c(1441,ntrips)
) %>%
Matrix::rowSums()
complete_trips
load_all()
rm(list = c("completed_trips_by_minute"))
load_all()
ctbm = completed_trips_by_minute(g$start_time, g$end_time)
ctc = complete_trips_curve(ctbm)
ctc
productivity(c(6*60,7*60,8*60), ctc)
efficiency(c(355, 415, 475), c(365, 425, 485), ctc)
plot_complete_trips_curve(ctc)
plot_productivity(ctc)
load_all()
productivity(c(6*60,7*60,8*60), ctc)
plot_productivity(ctc)
plot_efficiency(ctc, window=10)
plot_efficiency(ctc, window=1)
ctc = complete_trips_curve(ctbm, percent=TRUE)
ctc
plot_complete_trips_curve(ctc)
plot_productivity(ctc)
productivity(0:1339, ctc)
productivity(0:1339, ctc) %>% min()
productivity(0:1339, ctc) %>% max()
load_all()
plot_productivity(ctc)
document()
library(devtools)
use_data_raw()
library(data.table)
library(magrittr)
library(bigrquery)
library(dbplyr)
# Block groups in Benton County, OR
benton_bg = "https://lehd.ces.census.gov/data/lodes/LODES7/or/or_xwalk.csv.gz" %>%
fread() %>%
.[, bgrp] %>%
.[str_detect(., "^41003")] %>%
as.character()
# Block groups in Benton County, OR
benton_bg = "https://lehd.ces.census.gov/data/lodes/LODES7/or/or_xwalk.csv.gz" %>%
fread(select="bgrp") %>%
.[, bgrp] %>%
.[str_detect(., "^41003")] %>%
as.character()
library(stringr)
# Block groups in Benton County, OR
benton_bg = "https://lehd.ces.census.gov/data/lodes/LODES7/or/or_xwalk.csv.gz" %>%
fread(select="bgrp") %>%
.[, bgrp] %>%
.[str_detect(., "^41003")] %>%
as.character()
# Authenticate BQ account
bq_auth(scopes = "https://www.googleapis.com/auth/bigquery")
# Connect to the BigQuery northwest 2021 trips table
con = dbConnect(
bigquery(),
project = "replica-customer",
dataset = "northwest"
)
dbListTables(con)
trip_con = tbl(con, "northwest_2021_Q4_thursday_trip")
library(data.table)
library(magrittr)
library(bigrquery)
library(dbplyr)
library(stringr)
trip_con = tbl(con, "northwest_2021_Q4_thursday_trip")
library(dplyr)
trip_con = tbl(con, "northwest_2021_Q4_thursday_trip")
# Grab the start and end time for all trips originating in our zone
benton = trip_con %>%
filter(origin_bgrp %in% benton_bg) %>%
select(origin_bgrp, start_time, end_time) %>%
collect() %>%
data.table() %>%
.[, start_time := as.numeric(start_time)] %>%
.[, end_time := as.numeric(end_time)] %>%
.[order(origin_bgrp, start_time)] %>%
setnames(old="origin_bgrp", new="GEOID")
# Use this data!
usethis::use_data(benton, overwrite=TRUE)
benton
check()
load_all()
rm(list=ls())
load_all()
benton
usethis::use_vignette("basic-usage")
load_all()
benton
# Subset to one block group, for now
chintimini_park = benton %>%
.[GEOID == "410030011011"]
# Calculate completed trips by minute
ctbm = completed_trips_by_minute(
start_times = chintimini_park$start_times,
end_times = chintimini_park$end_times
)
chintimini_park
# Subset to one block group, for now
chintimini_park = benton %>%
.[GEOID == "410030011011"]
# Calculate completed trips by minute
ctbm = completed_trips_by_minute(
start_times = chintimini_park$start_time,
end_times = chintimini_park$end_time
)
# Build the completed trips curve
ctc = complete_trips_curve(
x = ctbm,
percent = FALSE
)
plot_complete_trips_curve(
complete_trips_curve = ctc
)
